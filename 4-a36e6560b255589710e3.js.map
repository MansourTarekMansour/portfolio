{"version":3,"sources":["webpack:///../src/components/intersection-observer.ts"],"names":["n","r","window","IntersectionObserver","forEach","isIntersecting","rootMargin","current","observe","unobserve"],"mappings":"2FAEA,IAAIA,EAAA,SAIYC,EACdA,GAGA,MAAM,yBAA0BC,QAO3BF,IACHA,EAAuB,IAAIG,sBACzB,SAAAH,GACEA,EAAQI,SAAQ,SAAAJ,GACVA,EAAMK,gBACRJ,SAIN,CAEEK,WAAA,mBAMJL,GAMA,OAJIA,EAAQM,SACVP,EAAqBQ,QAAQP,EAAQM,SAAA,WAIjCP,GAAwBC,EAAQM,SAClCP,EAAqBS,UAAUR,EAAQM,YAAA,WA7BzC,OADAN,IAAA,cAVN","file":"4-a36e6560b255589710e3.js","sourcesContent":["import { RefObject } from \"react\"\n\nlet intersectionObserver: IntersectionObserver\n\ntype Unobserver = () => void\n\nexport function createIntersectionObserver(\n  callback: () => void\n): (element: RefObject<HTMLElement | undefined>) => Unobserver {\n  // if we don't support intersectionObserver we don't lazy load (Sorry IE 11).\n  if (!(`IntersectionObserver` in window)) {\n    return function observe(): Unobserver {\n      callback()\n      return function unobserve(): void {}\n    }\n  }\n\n  if (!intersectionObserver) {\n    intersectionObserver = new IntersectionObserver(\n      entries => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            callback()\n          }\n        })\n      },\n      {\n        // TODO look at lighthouse & amp-image on what values they are using\n        rootMargin: `150%`,\n      }\n    )\n  }\n\n  return function observe(\n    element: RefObject<HTMLElement | undefined>\n  ): Unobserver {\n    if (element.current) {\n      intersectionObserver.observe(element.current)\n    }\n\n    return function unobserve(): void {\n      if (intersectionObserver && element.current) {\n        intersectionObserver.unobserve(element.current)\n      }\n    }\n  }\n}\n"],"sourceRoot":""}