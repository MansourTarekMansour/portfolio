{"version":3,"sources":["webpack:///../src/components/lazy-hydrate.tsx"],"names":["g","l","m","f","image","p","loading","h","isLoading","b","isLoaded","L","toggleIsLoaded","y","ref","j","r","v","width","w","height","E","layout","O","images","x","placeholder","I","backgroundColor","current","S","querySelector","e","k","JSON","stringify","q","t","C","c","createElement","a","n","Object","assign","o","i","s","u","d"],"mappings":"wMAqBgBA,IAUdC,EACAC,GAAA,IATEC,EAAAH,EAAAI,MACAC,EAAAL,EAAAM,QACAC,EAAAP,EAAAQ,UACAC,EAAAT,EAAAU,SACAC,EAAAX,EAAAY,eACAC,EAAAb,EAAAc,IACGC,EAAAC,YAAAhB,EAAA,mEAKGiB,EAAgEd,EAAhEe,MAAOC,EAAyDhB,EAAzDiB,OAAQC,EAAiDlB,EAAjDmB,OAAQC,EAAyCpB,EAAzCqB,OAAQC,EAAiCtB,EAAjCuB,YAAaC,EAAoBxB,EAApByB,gBAEpD,IAAK3B,EAAK4B,QACR,OAAO,KAGT,IAAMC,EAAa7B,EAAK4B,QAAQE,cAAA,2BAEhC,GAAIC,KAA4BF,IAAe5B,EAAS2B,QACtD,OAAO,KAGT,IAAMI,EAAWC,KAAKC,UAAUZ,GAC1Ba,GAAalC,EAAS2B,SAAWQ,YAAeJ,GAEhDK,EACJC,IAAAC,cAACC,IAAA,CAAcnB,OAAQD,EAAQH,MAAOD,EAAOG,OAAQD,IACjDiB,GACAG,IAAAC,cAACE,IAAAC,OAAAC,OAAA,GACKC,YACFpB,EACAhB,EACAY,EACAJ,EACAE,EACAQ,KAINY,IAAAC,cAACM,IAAAH,OAAAC,OAAA,GACM7B,EACDgC,YACFxC,EACA6B,GAAa3B,EACbc,EACAlB,EACAM,EACAsB,EACApB,MAUR,OAJiBX,EAAS2B,QAAUmB,SAASC,WACpCX,EAAWrC,EAAK4B,SACzB3B,EAAS2B,SAAA,EAAU,WAGb5B,EAAK4B,SACPmB,iBAAQ,KAAkC/C,EAAK4B","file":"5-5857a69752f629eacd97.js","sourcesContent":["import React, { MutableRefObject } from \"react\"\nimport { hydrate, render } from \"react-dom\"\nimport { GatsbyImageProps } from \"./gatsby-image.browser\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImageProps, MainImage } from \"./main-image\"\nimport {\n  getMainProps,\n  getPlaceholderProps,\n  hasNativeLazyLoadSupport,\n  hasImageLoaded,\n} from \"./hooks\"\nimport { ReactElement } from \"react\"\n\ntype LazyHydrateProps = Omit<GatsbyImageProps, \"as\" | \"style\" | \"className\"> & {\n  isLoading: boolean\n  isLoaded: boolean // alwaystype SetStateAction<S> = S | ((prevState: S) => S);\n  toggleIsLoaded: Function\n  ref: MutableRefObject<HTMLImageElement | undefined>\n}\n\nexport function lazyHydrate(\n  {\n    image,\n    loading,\n    isLoading,\n    isLoaded,\n    toggleIsLoaded,\n    ref,\n    ...props\n  }: LazyHydrateProps,\n  root: MutableRefObject<HTMLElement | undefined>,\n  hydrated: MutableRefObject<boolean>\n): (() => void) | null {\n  const { width, height, layout, images, placeholder, backgroundColor } = image\n\n  if (!root.current) {\n    return null\n  }\n\n  const hasSSRHtml = root.current.querySelector(`[data-gatsby-image-ssr]`)\n  // On first server hydration do nothing\n  if (hasNativeLazyLoadSupport && hasSSRHtml && !hydrated.current) {\n    return null\n  }\n\n  const cacheKey = JSON.stringify(images)\n  const hasLoaded = !hydrated.current && hasImageLoaded(cacheKey)\n\n  const component = (\n    <LayoutWrapper layout={layout} width={width} height={height}>\n      {!hasLoaded && (\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            isLoaded,\n            layout,\n            width,\n            height,\n            backgroundColor\n          )}\n        />\n      )}\n      <MainImage\n        {...(props as Omit<MainImageProps, \"images\" | \"fallback\">)}\n        {...getMainProps(\n          isLoading,\n          hasLoaded || isLoaded,\n          images,\n          loading,\n          toggleIsLoaded,\n          cacheKey,\n          ref\n        )}\n      />\n    </LayoutWrapper>\n  )\n\n  const doRender = hydrated.current ? render : hydrate\n  doRender(component, root.current)\n  hydrated.current = true\n\n  return (): void => {\n    if (root.current) {\n      render((null as unknown) as ReactElement, root.current)\n    }\n  }\n}\n"],"sourceRoot":""}